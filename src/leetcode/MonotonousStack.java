package leetcode;

import Linked_list.AuxUtils;
import edu.princeton.cs.algs4.In;

import java.io.*;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.RSAPublicKeySpec;
import java.util.Base64;
import java.util.Comparator;
import java.util.List;

public class MonotonousStack {

    public static void main(String[] args) throws IOException, InvalidKeySpecException, NoSuchAlgorithmException, CertificateException {
        String privateKey =
                "MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCjWFdQMblOYZRY" +
                        "8RJUEjpEtRq7gfdQEMIbT3U6uqWerWw54vvD5FyliHrEABsaVdT+Sz4m2rgIIY1T" +
                        "fGm01dq7+5/B2PEDyj32oKAzTrw/aSKtToW+Z9JqTQ4VbN//0XviTMaNz6A3Bwxg" +
                        "qr9OINiQLEsD5N5J+3yQeyJTE1jJdcu5urLGg5FvfSgBmFiNUznrmfwml9NRmt+f" +
                        "yfmtu3jpOqdyeJdvJfmzNSPuZ6JtpvJG0KNI2668G2+8kHLJ0F6vSyzsE13hZRof" +
                        "TWBfKK0Q+iIl/7CfM86h4rVuPZzEAXXKv8Fp7YieBMyFWPVfYwJJ+co4suDO9Hyp" +
                        "vr3fl2QVAgMBAAECggEAdUSU2qP4D0eKwxe/OtAjOPR0Dq3NqZN+ZzDyTol1IagL" +
                        "jLtiWE54HPcQe+o/ivaYBUBrjGV1vZCo74jgMs1dTZvmI7rlvPzS416J5IvgJf4K" +
                        "wTUgW4QZ0esj80nIvtXcBKlt2p12vkq3Hic3VJXMJCVIbbE/zQlZcjiUeePn2Ckt" +
                        "rFVIEAEMvkQTrlAHuec+Ik4WJ32rHFB1bewul+Y0QXXxbyOW58d7ZgtHLskbEMh2" +
                        "VLQ4XKNr7+QEmGDeujxNtmWZKWu3DD5+E3qql9Snjuhyq1HDXNtCHmzbLRLMLjdV" +
                        "RE1oVQoiHeqxJ5X4vv3iDPLuGcuhuSJ/DWs+oNSb+QKBgQDSnvKWNPnkgLB1B+Yf" +
                        "7WDbcTJqPVYjtpyBqNwpmWtEuRvLJ3smTaK9M4RP3zseu6NvIdltVzYK+DoOzzX8" +
                        "yKyFui+0qwH7e1u1v03ulOsw9qp1HFA1qVVskfvvcnaqAyYPgAXUvsdest+40jaS" +
                        "qeHo/3e3OB+8sV4g0plvSP3v8wKBgQDGidauNOzyxD8R1P4cwZmBkHYViB/cfnPO" +
                        "s09g3UzcuxgQtLFMz2I/F18vQuUH95iXFbeIutXa2pHW0i8OrzFR2mVI91ZaKT3B" +
                        "NbeRdwS3bFRCcxNfrP/JHeP1BBzo2F1o/hzvzNZcBOi67vUoc8MwzXfW4srFzsGz" +
                        "bi/UZLhl1wKBgAqaK7X59rZU8A0EF8Z1qZGCUjpc2hA0Kg6w1FxXt7me49JHK4DT" +
                        "GaUSic+Hei9i3KhEePBzGmpU8n86WQpfg6e7ppkenpvtKsGsXpzq7Cfr0srQYQ1C" +
                        "d+VeN+NmzKhkPi87j4+VBu4ybOad1ldtq8yRx5H2hkp2VzmpwEWE1BuXAoGAbha4" +
                        "h9ipGuRe5JBqZ5+icwmbsMzOfgFQTel3top/uFW2Pm0zcxf7rmhTS22YehZ88ioE" +
                        "nziapMRV4fyiQ0451t13FEKyC0SbDauvomWQo/TZtA8DSyYun2KHqLEjJqnzAekG" +
                        "OqImqte+BQnDvy6RqVoFfY48SfsfxVLwCqHe7fkCgYAWCkLEqPkPxO/y1a4IYJHK" +
                        "sRvqM86HARkZBhmzOetuF8M0s8ls78+nENHJ5MfvoFXNsa9apnCOfo2wQqscRShD" +
                        "FOQKtPPbqtHjmaaXjXwQpnag5TYA9XjJopkCAh1yc64olmDcDVX09vPysvL0Rr2l" +
                        "JxerHGvDDA6kU/GLsXQIYQ==";

        byte[] encoded = Base64.getDecoder().decode(privateKey);
        System.out.println(AuxUtils.b2h(encoded));
//        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
//        int count = Integer.parseInt(reader.readLine());

        String privateKeyS = "308204BC020100300D06092A864886F70D0101010500048204A6308204A20201000282010100A358575031B94E619458F11254123A44B51ABB81F75010C21B4F753ABAA59EAD6C39E2FBC3E45CA5887AC4001B1A55D4FE4B3E26DAB808218D537C69B4D5DABBFB9FC1D8F103CA3DF6A0A0334EBC3F6922AD4E85BE67D26A4D0E156CDFFFD17BE24CC68DCFA037070C60AABF4E20D8902C4B03E4DE49FB7C907B22531358C975CBB9BAB2C683916F7D280198588D5339EB99FC2697D3519ADF9FC9F9ADBB78E93AA77278976F25F9B33523EE67A26DA6F246D0A348DBAEBC1B6FBC9072C9D05EAF4B2CEC135DE1651A1F4D605F28AD10FA2225FFB09F33CEA1E2B56E3D9CC40175CABFC169ED889E04CC8558F55F630249F9CA38B2E0CEF47CA9BEBDDF976415020301000102820100754494DAA3F80F478AC317BF3AD02338F4740EADCDA9937E6730F24E897521A80B8CBB62584E781CF7107BEA3F8AF69805406B8C6575BD90A8EF88E032CD5D4D9BE623BAE5BCFCD2E35E89E48BE025FE0AC135205B8419D1EB23F349C8BED5DC04A96DDA9D76BE4AB71E27375495CC2425486DB13FCD095972389479E3E7D8292DAC554810010CBE4413AE5007B9E73E224E16277DAB1C50756DEC2E97E6344175F16F2396E7C77B660B472EC91B10C87654B4385CA36BEFE4049860DEBA3C4DB66599296BB70C3E7E137AAA97D4A78EE872AB51C35CDB421E6CDB2D12CC2E3755444D68550A221DEAB12795F8BEFDE20CF2EE19CBA1B9227F0D6B3EA0D49BF902818100D29EF29634F9E480B07507E61FED60DB71326A3D5623B69C81A8DC29996B44B91BCB277B264DA2BD33844FDF3B1EBBA36F21D96D57360AF83A0ECF35FCC8AC85BA2FB4AB01FB7B5BB5BF4DEE94EB30F6AA751C5035A9556C91FBEF7276AA03260F8005D4BEC75EB2DFB8D23692A9E1E8FF77B7381FBCB15E20D2996F48FDEFF302818100C689D6AE34ECF2C43F11D4FE1CC19981907615881FDC7E73CEB34F60DD4CDCBB1810B4B14CCF623F175F2F42E507F7989715B788BAD5DADA91D6D22F0EAF3151DA6548F7565A293DC135B7917704B76C544273135FACFFC91DE3F5041CE8D85D68FE1CEFCCD65C04E8BAEEF52873C330CD77D6E2CAC5CEC1B36E2FD464B865D70281800A9A2BB5F9F6B654F00D0417C675A99182523A5CDA10342A0EB0D45C57B7B99EE3D2472B80D319A51289CF877A2F62DCA84478F0731A6A54F27F3A590A5F83A7BBA6991E9E9BED2AC1AC5E9CEAEC27EBD2CAD0610D4277E55E37E366CCA8643E2F3B8F8F9506EE326CE69DD6576DABCC91C791F6864A765739A9C04584D41B970281806E16B887D8A91AE45EE4906A679FA273099BB0CCCE7E01504DE977B68A7FB855B63E6D337317FBAE68534B6D987A167CF22A049F389AA4C455E1FCA2434E39D6DD771442B20B449B0DABAFA26590A3F4D9B40F034B262E9F6287A8B12326A9F301E9063AA226AAD7BE0509C3BF2E91A95A057D8E3C49FB1FC552F00AA1DEEDF9028180160A42C4A8F90FC4EFF2D5AE086091CAB11BEA33CE870119190619B339EB6E17C334B3C96CEFCFA710D1C9E4C7EFA055CDB1AF5AA6708E7E8DB042AB1C45284314E40AB4F3DBAAD1E399A6978D7C10A676A0E53600F578C9A29902021D7273AE289660DC0D55F4F6F3F2B2F2F446BDA52717AB1C6BC30C0EA453F18BB1740861";
        System.out.println("----");

        Key key = getPrivateKey(AuxUtils.h2b(privateKeyS));
        System.out.println(key.toString());
        System.out.println(key.getFormat());

        System.out.println(AuxUtils.b2h(AuxUtils.s2a("6001D14DIOD1ALCG4BUVNDXTEJNKI")));


    }

    public static Key getPrivateKey(byte[] key) throws InvalidKeySpecException, NoSuchAlgorithmException {
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        return keyFactory.generatePrivate(new PKCS8EncodedKeySpec(key));


    }
}